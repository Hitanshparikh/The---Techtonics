version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: coastal_threats_db
    environment:
      POSTGRES_DB: coastal_threats
      POSTGRES_USER: coastal_user
      POSTGRES_PASSWORD: coastal_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - coastal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coastal_user -d coastal_threats"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: coastal_threats_backend
    environment:
      DATABASE_URL: postgresql://coastal_user:coastal_password@postgres:5432/coastal_threats
      SECRET_KEY: your-super-secret-key-change-in-production
      API_KEY: your-api-key-change-in-production
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - coastal_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
    container_name: coastal_threats_frontend
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - coastal_network
    command: npm start

  # Redis (for future enhancements)
  redis:
    image: redis:7-alpine
    container_name: coastal_threats_redis
    ports:
      - "6379:6379"
    networks:
      - coastal_network
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:

networks:
  coastal_network:
    driver: bridge


